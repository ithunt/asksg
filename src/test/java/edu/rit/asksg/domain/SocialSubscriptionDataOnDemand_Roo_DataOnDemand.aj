// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.rit.asksg.domain;

import edu.rit.asksg.domain.AsksgUser;
import edu.rit.asksg.domain.Service;
import edu.rit.asksg.domain.SocialSubscription;
import edu.rit.asksg.domain.SocialSubscriptionDataOnDemand;
import edu.rit.asksg.repository.SocialSubscriptionRepository;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SocialSubscriptionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SocialSubscriptionDataOnDemand: @Component;
    
    private Random SocialSubscriptionDataOnDemand.rnd = new SecureRandom();
    
    private List<SocialSubscription> SocialSubscriptionDataOnDemand.data;
    
    @Autowired
    SocialSubscriptionRepository SocialSubscriptionDataOnDemand.socialSubscriptionRepository;
    
    public SocialSubscription SocialSubscriptionDataOnDemand.getNewTransientSocialSubscription(int index) {
        SocialSubscription obj = new SocialSubscription();
        setCreatedBy(obj, index);
        setHandle(obj, index);
        setName(obj, index);
        setService(obj, index);
        return obj;
    }
    
    public void SocialSubscriptionDataOnDemand.setCreatedBy(SocialSubscription obj, int index) {
        AsksgUser createdBy = null;
        obj.setCreatedBy(createdBy);
    }
    
    public void SocialSubscriptionDataOnDemand.setHandle(SocialSubscription obj, int index) {
        String handle = "handle_" + index;
        obj.setHandle(handle);
    }
    
    public void SocialSubscriptionDataOnDemand.setName(SocialSubscription obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void SocialSubscriptionDataOnDemand.setService(SocialSubscription obj, int index) {
        Service service = null;
        obj.setService(service);
    }
    
    public SocialSubscription SocialSubscriptionDataOnDemand.getSpecificSocialSubscription(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SocialSubscription obj = data.get(index);
        Long id = obj.getId();
        return socialSubscriptionRepository.findOne(id);
    }
    
    public SocialSubscription SocialSubscriptionDataOnDemand.getRandomSocialSubscription() {
        init();
        SocialSubscription obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return socialSubscriptionRepository.findOne(id);
    }
    
    public boolean SocialSubscriptionDataOnDemand.modifySocialSubscription(SocialSubscription obj) {
        return false;
    }
    
    public void SocialSubscriptionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = socialSubscriptionRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SocialSubscription' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SocialSubscription>();
        for (int i = 0; i < 10; i++) {
            SocialSubscription obj = getNewTransientSocialSubscription(i);
            try {
                socialSubscriptionRepository.save(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            socialSubscriptionRepository.flush();
            data.add(obj);
        }
    }
    
}
