// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.rit.asksg.web;

import edu.rit.asksg.domain.SocialSubscription;
import edu.rit.asksg.repository.SocialSubscriptionRepository;
import edu.rit.asksg.web.SocialSubscriptionController;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect SocialSubscriptionController_Roo_Controller_Json {
    
    @Autowired
    SocialSubscriptionRepository SocialSubscriptionController.socialSubscriptionRepository;
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SocialSubscriptionController.showJson(@PathVariable("id") Long id) {
        SocialSubscription socialSubscription = socialSubscriptionRepository.findOne(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (socialSubscription == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(socialSubscription.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SocialSubscriptionController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<SocialSubscription> result = socialSubscriptionRepository.findAll();
        return new ResponseEntity<String>(SocialSubscription.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> SocialSubscriptionController.createFromJson(@RequestBody String json) {
        SocialSubscription socialSubscription = SocialSubscription.fromJsonToSocialSubscription(json);
        socialSubscriptionRepository.save(socialSubscription);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> SocialSubscriptionController.createFromJsonArray(@RequestBody String json) {
        for (SocialSubscription socialSubscription: SocialSubscription.fromJsonArrayToSocialSubscriptions(json)) {
            socialSubscriptionRepository.save(socialSubscription);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> SocialSubscriptionController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        SocialSubscription socialSubscription = SocialSubscription.fromJsonToSocialSubscription(json);
        if (socialSubscriptionRepository.save(socialSubscription) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> SocialSubscriptionController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (SocialSubscription socialSubscription: SocialSubscription.fromJsonArrayToSocialSubscriptions(json)) {
            if (socialSubscriptionRepository.save(socialSubscription) == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> SocialSubscriptionController.deleteFromJson(@PathVariable("id") Long id) {
        SocialSubscription socialSubscription = socialSubscriptionRepository.findOne(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (socialSubscription == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        socialSubscriptionRepository.delete(socialSubscription);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
