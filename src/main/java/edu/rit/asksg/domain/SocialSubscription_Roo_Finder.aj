// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.rit.asksg.domain;

import edu.rit.asksg.domain.Person;
import edu.rit.asksg.domain.Service;
import edu.rit.asksg.domain.SocialSubscription;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect SocialSubscription_Roo_Finder {
    
    public static TypedQuery<SocialSubscription> SocialSubscription.findSocialSubscriptionsByHandleEquals(String handle) {
        if (handle == null || handle.length() == 0) throw new IllegalArgumentException("The handle argument is required");
        EntityManager em = SocialSubscription.entityManager();
        TypedQuery<SocialSubscription> q = em.createQuery("SELECT o FROM SocialSubscription AS o WHERE o.handle = :handle", SocialSubscription.class);
        q.setParameter("handle", handle);
        return q;
    }
    
    public static TypedQuery<SocialSubscription> SocialSubscription.findSocialSubscriptionsByPerson(Person person) {
        if (person == null) throw new IllegalArgumentException("The person argument is required");
        EntityManager em = SocialSubscription.entityManager();
        TypedQuery<SocialSubscription> q = em.createQuery("SELECT o FROM SocialSubscription AS o WHERE o.person = :person", SocialSubscription.class);
        q.setParameter("person", person);
        return q;
    }
    
    public static TypedQuery<SocialSubscription> SocialSubscription.findSocialSubscriptionsByProvider(Service provider) {
        if (provider == null) throw new IllegalArgumentException("The provider argument is required");
        EntityManager em = SocialSubscription.entityManager();
        TypedQuery<SocialSubscription> q = em.createQuery("SELECT o FROM SocialSubscription AS o WHERE o.provider = :provider", SocialSubscription.class);
        q.setParameter("provider", provider);
        return q;
    }
    
}
